{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/portfolio/src/lib/redis.ts"],"sourcesContent":["import Redis from 'ioredis';\r\n\r\nconst redisUrl = process.env.REDIS_URL;\r\n\r\nif (!redisUrl) {\r\n    throw new Error('Missing REDIS_URL environment variable');\r\n}\r\n\r\nexport const redis = new Redis(redisUrl);\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;AAEtC,IAAI,CAAC,UAAU;IACX,MAAM,IAAI,MAAM;AACpB;AAEO,MAAM,QAAQ,IAAI,2IAAA,CAAA,UAAK,CAAC","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/portfolio/src/lib/validateContactToken.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\r\nimport { redis } from './redis';\r\nimport jwt from 'jsonwebtoken';\r\nimport { z } from 'zod';\r\n\r\nconst TokenSchema = z.object({\r\n    jti: z.string(),\r\n});\r\n\r\nclass TokenValidationError extends Error {\r\n    constructor(message: string, public readonly code: string) {\r\n        super(message);\r\n    }\r\n}\r\n\r\nexport async function validateContactToken(req: NextRequest) {\r\n    const authHeader = req.headers.get('authorization');\r\n    const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\r\n\r\n    if (!token) {\r\n        throw new TokenValidationError('Token is missing', 'MISSING_TOKEN');\r\n    }\r\n\r\n    const jwtSecret = process.env.JWT_SECRET;\r\n    if (!jwtSecret) {\r\n        throw new TokenValidationError('JWT_SECRET is not set', 'CONFIG_ERROR');\r\n    }\r\n\r\n    try {\r\n        const decoded = TokenSchema.parse(jwt.verify(token, jwtSecret));\r\n        const key = `contact_token:${encodeURIComponent(decoded.jti)}`;\r\n\r\n        const exists = await redis.get(key);\r\n        if (!exists) {\r\n            throw new TokenValidationError('Token expired or invalid', 'INVALID_TOKEN');\r\n        }\r\n\r\n        await redis.del(key).catch(err => {\r\n            console.error('Redis delete failed:', err);\r\n        });\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            if (error instanceof jwt.TokenExpiredError) {\r\n                throw new TokenValidationError('Token expired', 'TOKEN_EXPIRED');\r\n            }\r\n            if (error instanceof jwt.JsonWebTokenError) {\r\n                throw new TokenValidationError('Invalid token', 'INVALID_TOKEN');\r\n            }\r\n            console.error('Token validation error:', error);\r\n            throw new TokenValidationError('Validation failed', 'VALIDATION_ERROR');\r\n        }\r\n\r\n        console.error('Unknown error during validation', error);\r\n        throw new TokenValidationError('Validation failed', 'VALIDATION_ERROR');\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAEA,MAAM,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzB,KAAK,sIAAA,CAAA,IAAC,CAAC,MAAM;AACjB;AAEA,MAAM,6BAA6B;;IAC/B,YAAY,OAAe,EAAE,AAAgB,IAAY,CAAE;QACvD,KAAK,CAAC,eADmC,OAAA;IAE7C;AACJ;AAEO,eAAe,qBAAqB,GAAgB;IACvD,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC;IACnC,MAAM,QAAQ,YAAY,WAAW,aAAa,WAAW,KAAK,CAAC,KAAK;IAExE,IAAI,CAAC,OAAO;QACR,MAAM,IAAI,qBAAqB,oBAAoB;IACvD;IAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,UAAU;IACxC,IAAI,CAAC,WAAW;QACZ,MAAM,IAAI,qBAAqB,yBAAyB;IAC5D;IAEA,IAAI;QACA,MAAM,UAAU,YAAY,KAAK,CAAC,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QACpD,MAAM,MAAM,CAAC,cAAc,EAAE,mBAAmB,QAAQ,GAAG,GAAG;QAE9D,MAAM,SAAS,MAAM,qHAAA,CAAA,QAAK,CAAC,GAAG,CAAC;QAC/B,IAAI,CAAC,QAAQ;YACT,MAAM,IAAI,qBAAqB,4BAA4B;QAC/D;QAEA,MAAM,qHAAA,CAAA,QAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,CAAA;YACvB,QAAQ,KAAK,CAAC,wBAAwB;QAC1C;IACJ,EAAE,OAAO,OAAO;QACZ,IAAI,iBAAiB,OAAO;YACxB,IAAI,iBAAiB,uIAAA,CAAA,UAAG,CAAC,iBAAiB,EAAE;gBACxC,MAAM,IAAI,qBAAqB,iBAAiB;YACpD;YACA,IAAI,iBAAiB,uIAAA,CAAA,UAAG,CAAC,iBAAiB,EAAE;gBACxC,MAAM,IAAI,qBAAqB,iBAAiB;YACpD;YACA,QAAQ,KAAK,CAAC,2BAA2B;YACzC,MAAM,IAAI,qBAAqB,qBAAqB;QACxD;QAEA,QAAQ,KAAK,CAAC,mCAAmC;QACjD,MAAM,IAAI,qBAAqB,qBAAqB;IACxD;AACJ","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/portfolio/src/lib/middleware/withContactValidation.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { validateContactToken } from '../validateContactToken';\r\n\r\nexport function withContactValidation(handler: (req: NextRequest) => Promise<NextResponse>) {\r\n    return async (req: NextRequest) => {\r\n        try {\r\n            await validateContactToken(req);\r\n            return await handler(req);\r\n        } catch (error) {\r\n            return NextResponse.json({ error: (error as Error).message }, { status: 401 });\r\n        }\r\n    };\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,sBAAsB,OAAoD;IACtF,OAAO,OAAO;QACV,IAAI;YACA,MAAM,CAAA,GAAA,oIAAA,CAAA,uBAAoB,AAAD,EAAE;YAC3B,OAAO,MAAM,QAAQ;QACzB,EAAE,OAAO,OAAO;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,AAAC,MAAgB,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAChF;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/portfolio/src/app/api/send-message/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { withContactValidation } from '@/lib/middleware/withContactValidation';\r\nimport { Resend } from 'resend';\r\n\r\nconst resend = new Resend(process.env.RESEND_API_KEY); // Твой ключ в .env файле\r\n\r\nasync function handler(req: NextRequest) {\r\n    const data = await req.json();\r\n    const { name, email, message } = data;\r\n\r\n    try {\r\n        // Отправка письма через Resend\r\n        const emailResponse = await resend.emails.send({\r\n            from: 'Your Name <A@resend.dev>', // Домен должен быть верифицирован в Resend\r\n            to: 'toxa1381@gmail.com',             // Сюда придет письмо\r\n            subject: 'Новое сообщение с лендинга',\r\n            html: `\r\n        <h1>Новое сообщение</h1>\r\n        <p><strong>Имя:</strong> ${name}</p>\r\n        <p><strong>Email:</strong> ${email}</p>\r\n        <p><strong>Сообщение:</strong> ${message}</p>\r\n      `,\r\n        });\r\n\r\n        console.log('Письмо отправлено:', emailResponse);\r\n\r\n        return NextResponse.json({ success: true });\r\n    } catch (error) {\r\n        console.error('Ошибка при отправке письма:', error);\r\n        return NextResponse.json({ success: false, error: 'Ошибка отправки письма' }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport const POST = withContactValidation(handler);\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc,GAAG,yBAAyB;AAEhF,eAAe,QAAQ,GAAgB;IACnC,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;IAEjC,IAAI;QACA,+BAA+B;QAC/B,MAAM,gBAAgB,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YAC3C,MAAM;YACN,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;;iCAEc,EAAE,KAAK;mCACL,EAAE,MAAM;uCACJ,EAAE,QAAQ;MAC3C,CAAC;QACC;QAEA,QAAQ,GAAG,CAAC,sBAAsB;QAElC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC7C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChG;AACJ;AAEO,MAAM,OAAO,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE","debugId":null}}]
}