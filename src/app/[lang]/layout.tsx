import type {Metadata} from "next";
import {Geist, Geist_Mono} from "next/font/google";
import "../../style/globals.css"
import {ThemeProvider} from "next-themes";
import {DictionaryProvider} from "@/app/i18n/DictionaryContext";
import {getDictionary} from '@/app/i18n/get-dictionary';
import React from "react";
/*import {notFound} from "next/navigation";*/
import { headers } from 'next/headers';
export async function generateStaticParams() {
    return [{ lang: 'en' }, { lang: 'ru' }];
}

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
    const headersList =await  headers();
    const langFromHeader = headersList.get('x-current-locale');
    console.log(langFromHeader);
    const path = headersList.get('x-invoke-path') || headersList.get('x-matched-path') || '';
    const lang = langFromHeader || path?.split('/')[1];
    console.log(lang)
    /*if (!['en', 'ru'].includes(lang || '')) {
        notFound();
    }*/

    const dict =  await getDictionary(lang as 'en' | 'ru');

  return (
    <html lang={lang} suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
      <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
          <DictionaryProvider  dict={dict}>
              {children}
          </DictionaryProvider>
      </ThemeProvider>
      </body>
    </html>
  );
}
